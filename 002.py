import math

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import timeit

# O(n)
def solve1():
    total = 0
    last = 1
    curr = 2
    while (curr < 4_000_000):
        if curr % 2 == 0:
            print(curr / last)
            total += curr
        last, curr = curr, last + curr

    return total

print(solve1())
task = 'solve1()'
# print(f'Solution 1 exec time: {timeit.timeit(task, globals=globals(), number=1_000_000)} Î¼s')

# O(1)
def solve2():
    pass

# n_3 = n_1 + n_2
# n = n_-1 + n_-2

def fibb(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    last = 1
    curr = 1
    for _ in range(n-2):
        last, curr = curr, last + curr

    return curr

phi = 1.61803398875
phi_conj = -0.61803398875

def fibb2(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    return 2 * phi ** (n-2)

def fibb3(n):
    return ((phi ** n) - (phi_conj ** n)) / math.sqrt(5)

for i in range(1, 30):
    print(fibb(i))
    print(int(fibb3(i) + 0.5))
    print()

# a_n = phi^n